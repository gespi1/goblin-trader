package twelvedata

import (
	"fmt"
	"goblin-trader/pkg/common"
	"math"

	"github.com/go-gota/gota/dataframe"
	"gonum.org/v1/gonum/mat"
)

func SuperTrend(df dataframe.DataFrame) {
	abs := func(i, j int, v float64) float64 {
		return math.Abs(v)
	}

	// move dataframes into Matrices
	high := common.Matrix{df.Select([]string{"High"})}
	low := common.Matrix{df.Select([]string{"Low"})}
	prevClose := common.Matrix{df.Select([]string{"pClose"})}

	// make Matrices in Denses Matrices
	dHigh := mat.DenseCopyOf(high)
	dLow := mat.DenseCopyOf(low)
	dPrevClose := mat.DenseCopyOf(prevClose)

	// initialize empty Dense Matrices to take in the values for [ {HIGH - LOW}, {HIGH - P.CLOSE}, {P.CLOSE - LOW} ]
	var highLow mat.Dense
	var highPClose mat.Dense
	var pCloseLow mat.Dense

	// subtract
	highLow.Sub(dHigh, dLow)
	highPClose.Sub(dHigh, dPrevClose)
	pCloseLow.Sub(dPrevClose, dLow)

	// fmt.Printf("c = %v", fc)
	fmt.Println(mat.Formatted(&highLow))
	fmt.Println(mat.Formatted(&highPClose))
	fmt.Println(mat.Formatted(&pCloseLow))

	// get dimensions of highow Matrix and create a new Matrix based off the length
	l, _ := highLow.Dims()
	price_diffs := mat.NewDense(l, 3, nil) // will hold the values of [ {HIGH - LOW}, {HIGH - P.CLOSE}, {P.CLOSE - LOW} ]

	// empty []string's
	var hl []float64
	var hpc []float64
	var pcl []float64

	// create []string for each column
	highLowS := mat.Col(hl, 0, &highLow)
	highPCloseS := mat.Col(hpc, 0, &highPClose)
	pCloseLowS := mat.Col(pcl, 0, &pCloseLow)

	// fill in new Dense Matrix with [ {HIGH - LOW}, {HIGH - P.CLOSE}, {P.CLOSE - LOW} ] values
	price_diffs.SetCol(0, highLowS)
	price_diffs.SetCol(1, highPCloseS)
	price_diffs.SetCol(2, pCloseLowS)

	fmt.Println(mat.Formatted(price_diffs))

	// set all floats to absolute
	price_diffs.Apply(abs, price_diffs)

	fmt.Println(mat.Formatted(price_diffs))

	// get Max of price_diffs in []float64
	row := 0
	var max []float64
	for row < l {
		var m float64 = 0

		for _, v := range price_diffs.RawRowView(row) {
			if m < v {
				m = v
			}
		}
		max = append(max, m)
		row += 1
	}
	fmt.Println(max)

}
